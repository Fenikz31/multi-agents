---
alwaysApply: true
description: Workflow de d√©veloppement strict avec cr√©ation de branche obligatoire
---

# Workflow de D√©veloppement Strict - Branches Obligatoires

## ‚ö†Ô∏è R√àGLE CRITIQUE : Cr√©er la branche AVANT toute impl√©mentation

**TOUJOURS cr√©er une nouvelle branche feature AVANT de commencer l'impl√©mentation, m√™me pour les plus petites modifications.**

## Workflow Obligatoire (dans l'ordre exact)

### 1. **Explorer** üîç
- Lire la documentation: [docs/overview.md](mdc:docs/overview.md), [docs/product-brief.md](mdc:docs/product-brief.md), [docs/data-model.md](mdc:docs/data-model.md), [docs/cli-reference.md](mdc:docs/cli-reference.md), [docs/roadmap.md](mdc:docs/roadmap.md)
- Inspecter la structure projet: [crates/cli/src/main.rs](mdc:crates/cli/src/main.rs), [config/](mdc:config/), [logs/](mdc:logs/)
- Valider les r√®gles Cursor existantes dans [.cursor/rules](mdc:.cursor/rules/)

### 2. **Planifier** üìã
- Lister des TODOs atomiques (outil TODO de Cursor) avec un seul √©l√©ment en cours
- Identifier les impacts (API OpenAPI, sch√©mas SQLite, config YAML)
- **PR√âPARER les branches selon la convention `feature/`, `bugfix/`, `hotfix/`, `refactor/`**

### 3. **üö® CR√âER NOUVELLE BRANCHE (OBLIGATOIRE)** üåø
```bash
# TOUJOURS faire ceci EN PREMIER avant tout code
git checkout -b feature/m4-XX-description
# ou
git checkout -b bugfix/issue-XX-description  
# ou
git checkout -b hotfix/critical-XX-description
# ou
git checkout -b refactor/component-XX-description
```

**‚ö†Ô∏è INTERDICTION ABSOLUE :**
- ‚ùå Committer sur `main` directement
- ‚ùå Impl√©menter avant de cr√©er la branche
- ‚ùå Cr√©er la branche apr√®s avoir committ√©

### 4. **√âcrire les tests en premier (TDD)** üß™
- Backend Java: JUnit 5 + Mockito + AssertJ; tests de contrat OpenAPI
- Frontend React: React Testing Library, data-testid, Web Vitals
- Valider les sp√©cifications OpenAPI et g√©n√©rer le client API

### 5. **Commit (RED)** üìù
```bash
git add .
git commit -m "test: add unit tests for [feature description]"
```

### 6. **Coder (GREEN)** üíª
- Respecter l'architecture (Hexagonale pour Java, couches d√©finies, atomique pour UI)
- TypeScript strict, ESLint/Prettier, NestJS best practices
- S√©curit√©: secrets via env, cookies s√©curis√©s, XSS, CSP, sanitization

### 7. **It√©rer (REFACTOR)** üîÑ
- Refactoriser pour clart√© et lisibilit√©; maintenir la couverture
- Mettre √† jour la documentation (OpenAPI, README, docs/*) si n√©cessaire

### 8. **Commit** üìù
```bash
git add .
git commit -m "feat: implement [feature description]

- D√©tail des changements
- Crit√®res d'acceptation respect√©s
- Tests passants

Closes #XX"
```

### 9. **Pousser la branche** üöÄ
```bash
git push -u origin feature/m4-XX-description
```

### 10. **Cr√©er la MR qui ferme l'issue** üîó
```bash
glab mr create --title "feat: [description] - Closes #XX" \
  --description "## Description
[Description compl√®te]

## Changes
- ‚úÖ [Liste des changements]

## Testing
- ‚úÖ [Tests effectu√©s]

## Acceptance Criteria
- [x] [Crit√®res respect√©s]

Closes #XX" \
  --assignee fenikz \
  --label "milestone::M4,area::[area],type::feat,priority::high"
```

## Conventions de Branches

- `feature/m4-XX-description` : Nouvelles fonctionnalit√©s
- `bugfix/issue-XX-description` : Corrections de bugs
- `hotfix/critical-XX-description` : Corrections critiques
- `refactor/component-XX-description` : Refactoring

## V√©rifications Obligatoires

Avant chaque commit, v√©rifier :
- [ ] Branche cr√©√©e AVANT l'impl√©mentation
- [ ] Tests √©crits en premier (TDD)
- [ ] Code respecte l'architecture
- [ ] Lints passent
- [ ] Tests passent
- [ ] Documentation mise √† jour si n√©cessaire

## Sanctions en Cas de Non-Respect

Si l'agent ne suit pas ce workflow :
1. **ARR√äTER** imm√©diatement l'impl√©mentation
2. Cr√©er la branche appropri√©e
3. D√©placer les changements sur la branche (cherry-pick si n√©cessaire)
4. Reprendre le workflow depuis l'√©tape 4

## Exemples de Messages de Commit

```bash
# Tests (RED)
git commit -m "test: add unit tests for agent commands (run|attach|stop)"

# Impl√©mentation (GREEN)  
git commit -m "feat: implement agent commands (run|attach|stop) for M4 tmux REPL

- Add AgentCmd enum with Run, Attach, Stop subcommands
- Implement run_agent_run: create tmux session/window, start provider REPL
- Support all flags: --project, --agent, --role, --provider, --model, --workdir
- Follow tmux conventions: session 'proj:{project}', window '{role}:{agent}'
- Timeout 5s per action, exit codes 0/2/5/8 according to spec
- NDJSON logging to ./logs/{project}/{role}.ndjson
- Idempotent operations: no duplicates on rerun

Closes #31"
```

## R√©f√©rences

- Workflow complet: [docs/workflows.md](mdc:docs/workflows.md)
- CLI Reference: [docs/cli-reference.md](mdc:docs/cli-reference.md)
- Architecture: [docs/overview.md](mdc:docs/overview.md)